error               <- as.data.frame(t(error))
colnames(error)     <- c("error_dev", "error_abs", "error_pct")
res_error$error_dev <- c(res_error$error_dev, error$error_dev)
res_perf[[i]]       <- reportPerf(error_df = error)
model[[i]]          <- res.model
}
model_selection$model    <- model
model_selection$rf_error <- res_error
model_selection$perf     <- unlist(res_perf)
## >>>>>>>>>>>>>>>>>>>>>>>
## linear model
## >>>>>>>>>>>>>>>>>>>>>>>
## input definition
db              <- ds.imputed
response        <- config$model2$reponse
predictor       <- config$model2$predictor
db[, predictor[-c(1:4)]] <- scale(db[, predictor[-c(1:4)]], center = TRUE, scale = TRUE)
ncross          <- 3
model_name      <- "Boosting: General Linear Regression"
## cross-validation setting
train_idx       <- sample(1:ncross, size = nrow(ds), replace = TRUE)
## loooping
for(i in 1:ncross){
test_id   <- c(1:ncross)[i]
train.x   <- db[!(train_idx %in% test_id), predictor]
train.y   <- db[!(train_idx %in% test_id), response ]
test.x    <- db[  train_idx %in% test_id,  predictor]
test.y    <- db[  train_idx %in% test_id,  response ]
## train model...
print(paste("training", i, "th", model_name, "model.."))
ctrl <- boost_control(mstop = 2000)
res.model <- glmboost(train.y ~ ., data = as.data.frame(cbind(train.y, train.x))
, center = TRUE, control = ctrl )
# mstop(aic <- AIC(res.model))
#res.model <- stepAIC(res.model, direction="both")
## testing
print(paste("test..."))
pred_val  <- predict(res.model, newdata = test.x)
pred_val  <- as.data.frame(cbind(test.y, pred_val))
colnames(pred_val)  <- c("transvalue_log", "pred_val")
error               <- apply(pred_val, MARGIN = 1, predError)
error               <- as.data.frame(t(error))
colnames(error)     <- c("error_dev", "error_abs", "error_pct")
res_error$error_dev <- c(res_error$error_dev, error$error_dev)
res_perf[[i]]       <- reportPerf(error_df = error)
model[[i]]          <- res.model
}
model_selection$glmboost_model <- model
model_selection$glmboost_error <- res_error
model_selection$glmboost_perf  <- unlist(res_perf)
## >>>>>>>>>>>>>>>>>>>>>>>
## linear model
## >>>>>>>>>>>>>>>>>>>>>>>
## input definition
db              <- ds.imputed
response        <- config$model2$reponse
predictor       <- config$model2$predictor
db[, predictor[-c(1:4)]] <- scale(db[, predictor[-c(1:4)]], center = TRUE, scale = TRUE)
ncross          <- 3
model_name      <- "Linear Regression"
## cross-validation setting
train_idx       <- sample(1:ncross, size = nrow(ds), replace = TRUE)
## result container
## loooping
for(i in 1:ncross){
test_id   <- c(1:ncross)[i]
train.x   <- db[!(train_idx %in% test_id), predictor]
train.y   <- db[!(train_idx %in% test_id), response ]
test.x    <- db[  train_idx %in% test_id,  predictor]
test.y    <- db[  train_idx %in% test_id,  response ]
## train model...
print(paste("training", i, "th", model_name, "model.."))
res.model <- lm(train.y ~ ., data = as.data.frame(cbind(train.y, train.x)))
res.model <- stepAIC(res.model, direction="both")
## testing
print(paste("test..."))
pred_val  <- predict(res.model, newdata = test.x)
pred_val  <- as.data.frame(cbind(test.y, pred_val))
colnames(pred_val)  <- c("transvalue_log", "pred_val")
error               <- apply(pred_val, MARGIN = 1, predError)
error               <- as.data.frame(t(error))
colnames(error)     <- c("error_dev", "error_abs", "error_pct")
res_error$error_dev <- c(res_error$error_dev, error$error_dev)
res_perf[[i]]       <- reportPerf(error_df = error)
model[[i]]          <- res.model
}
model_selection$lm_model <- model
model_selection$lm_error <- res_error
model_selection$lm_perf  <- unlist(res_perf)
## >>>>>>>>>>>>>>>>>>>>>>>
## SVM
## >>>>>>>>>>>>>>>>>>>>>>>
## input definition
db              <- ds.imputed
response        <- config$model2$reponse
predictor       <- config$model2$predictor
db[, predictor[-c(1:4)]] <- scale(db[, predictor[-c(1:4)]], center = TRUE, scale = TRUE)
ncross          <- 3
model_name      <- "SVM(kernel:linear)"
## cross-validation setting
train_idx       <- sample(1:ncross, size = nrow(ds), replace = TRUE)
## result container
## loooping
for(i in 1:ncross){
test_id   <- c(1:ncross)[i]
train.x   <- db[!(train_idx %in% test_id), predictor]
train.y   <- db[!(train_idx %in% test_id), response ]
test.x    <- db[  train_idx %in% test_id,  predictor]
test.y    <- db[  train_idx %in% test_id,  response ]
## train model...
print(paste("training", i, "th", model_name, "model.."))
res.model <- svm(x = train.x, y = train.y,
, gamma = 1
, scale = TRUE
, type = "eps"
, kernel = "linear")
## testing
print(paste("test..."))
pred_val  <- predict(res.model, newdata = test.x)
pred_val  <- as.data.frame(cbind(test.y, pred_val))
colnames(pred_val)  <- c("transvalue_log", "pred_val")
error               <- apply(pred_val, MARGIN = 1, predError)
error               <- as.data.frame(t(error))
colnames(error)     <- c("error_dev", "error_abs", "error_pct")
res_error$error_dev <- c(res_error$error_dev, error$error_dev)
res_perf[[i]]       <- reportPerf(error_df = error)
model[[i]]          <- res.model
}
model_selection$svm_model <- model
model_selection$svm_error <- res_error
model_selection$svm_perf  <- unlist(res_perf)
getwd()
## ######################################## ##
## Integral Ad Science Interview Project:   ##
## Find HotSpot                             ##
##                                          ##
## Author: Yi Zhang                         ##
## Date: Nov/15/2014                        ##
## ######################################## ##
library(dplyr)
library(ggplot2)
## ######################################## ##
## ENVIRONMENT SETTING -----------------------
## ######################################## ##
dir      <- list()
dir$root <- paste(getwd(), '/', sep = '')
dir$data <- paste(dir$root, 'data/', sep = '')
## ######################################## ##
## CUSTOM FUNCTION ---------------------------
## ######################################## ##
getDataPath <- function(path, dir){
# ************************************* #
# Return the complete path to data file #
#                                       #
# Parameter:                            #
# ---------                             #
# path: string,                         #
# dir: string                           #
#                                       #
# Return:                               #
# -------                               #
# res: string                           #
# ************************************* #
res <- paste(dir, path, sep = "")
return(res)
}
## ######################################## ##
## LOAD DATA ---------------------------------
## ######################################## ##
rm(list = ls())
install.packages("dplyr")
## ######################################## ##
## Integral Ad Science Interview Project:   ##
## Find HotSpot                             ##
##                                          ##
## Author: Yi Zhang                         ##
## Date: Nov/15/2014                        ##
## ######################################## ##
library(plyr)
library(ggplot2)
## ######################################## ##
## ENVIRONMENT SETTING -----------------------
## ######################################## ##
dir      <- list()
dir$root <- paste(getwd(), '/', sep = '')
dir$data <- paste(dir$root, 'data/', sep = '')
## ######################################## ##
## CUSTOM FUNCTION ---------------------------
## ######################################## ##
getDataPath <- function(path, dir){
# ************************************* #
# Return the complete path to data file #
#                                       #
# Parameter:                            #
# ---------                             #
# path: string,                         #
# dir: string                           #
#                                       #
# Return:                               #
# -------                               #
# res: string                           #
# ************************************* #
res <- paste(dir, path, sep = "")
return(res)
}
## ######################################## ##
## LOAD DATA ---------------------------------
## ######################################## ##
file01 <- read.csv(file = getDataPath('hotspot.event_1', dir$data), header = 0, stringsAsFactors = FALSE)
setwd("/home/beingzy/Documents/Projects/integralads/")
ls
getwd()
dir      <- list()
dir$root <- paste(getwd(), '/', sep = '')
dir$data <- paste(dir$root, 'data/', sep = '')
file01 <- read.csv(file = getDataPath('hotspot.event_1', dir$data), header = 0, stringsAsFactors = FALSE)
file02 <- read.csv(file = getDataPath('hotspot.event_2', dir$data), header = 0, stringsAsFactors = FALSE)
head(file02)
file02 <- read.csv(file = getDataPath('hotspot.event_2', dir$data), header = 0, stringsAsFactors = FALSE, skip=1)
head(file02)
file01 <- read.csv(file = getDataPath('hotspot.event_1', dir$data), header = 0
, stringsAsFactors = FALSE, sep = '\t')
file02 <- read.csv(file = getDataPath('hotspot.event_2', dir$data), header = 0
, stringsAsFactors = FALSE, sep = '\t', skip=1)
head(file01)
head(file02)
db     <- rbind(file01, file02)
rm(list = c('file01', 'file02'))
head(db)
colnames(db) <- c('timestamp', 'ip_address', 'domain_name', 'uri', 'user_agent_str')
sapply(db$ip_address[1:100]
## ######################################## ##
## Integral Ad Science Interview Project:   ##
## Find HotSpot                             ##
##                                          ##
## Author: Yi Zhang                         ##
## Date: Nov/15/2014                        ##
## ######################################## ##
library(plyr)
library(ggplot2)
## ######################################## ##
## ENVIRONMENT SETTING -----------------------
## ######################################## ##
dir      <- list()
dir$root <- paste(getwd(), '/', sep = '')
dir$data <- paste(dir$root, 'data/', sep = '')
## ######################################## ##
## CUSTOM FUNCTION ---------------------------
## ######################################## ##
getDataPath <- function(path, dir){
# ************************************* #
# Return the complete path to data file #
#                                       #
# Parameter:                            #
# ---------                             #
# path: string,                         #
# dir: string                           #
#                                       #
# Return:                               #
# -------                               #
# res: string                           #
# ************************************* #
res <- paste(dir, path, sep = "")
return(res)
}
## ######################################## ##
## LOAD DATA ---------------------------------
## ######################################## ##
file01 <- read.csv(file = getDataPath('hotspot.event_1', dir$data), header = 0
, stringsAsFactors = FALSE, sep = '\t')
file02 <- read.csv(file = getDataPath('hotspot.event_2', dir$data), header = 0
, stringsAsFactors = FALSE, sep = '\t', skip=1)
## Combine rows
db           <- rbind(file01, file02)
colnames(db) <- c('timestamp', 'ip_address', 'domain_name', 'uri', 'user_agent_str')
rm(list = c('file01', 'file02'))
## Data Manipulation
sapply(db$ip_address[1:100], function(x){ strsplit(x = x, split = ".") })
strsplit("10.231.12", split = ".")
strsplit("10.231.12", split = ".", fixed = TRUE)
sapply(db$ip_address[1:100], function(x) strsplit(x = x, split = ".", fixed = TRUE)[[1]] )
t(sapply(db$ip_address[1:100], function(x) strsplit(x = x, split = ".", fixed = TRUE)[[1]] ))
temp <- sapply(db$ip_address, function(x) strsplit(x = x, split = ".", fixed = TRUE)[[1]] )
temp <- t(temp)
temp[1:5, ]
head(temp)
temp <- sapply(db$ip_address[1:5], function(x) strsplit(x = x, split = ".", fixed = TRUE)[[1]] )
temp
t(temp)
temp <- sapply(db$ip_address, function(x) strsplit(x = x, split = ".", fixed = TRUE)[[1]] )
temp <- t(temp)
dim(temp_)
dim(temp)
temp <- sapply(db$ip_address, function(x) strsplit(x = x, split = ".", fixed = TRUE)[[1]] )
dim(temp)
temp[1:5, ]
temp[1:5]
temp <- unlist(temp)
dim(temp)
temp
temp <- sapply(db$ip_address, function(x) strsplit(x = x, split = ".", fixed = TRUE)[[1]] )
dim(temp)
temp
temp <- data.frame(matrix(unlist(temp), nrow=nrow(db), byrow=T))
temp <- sapply(db$ip_address, function(x) strsplit(x = x, split = ".", fixed = TRUE)[[1]] )
length(temp)
nrow(db)
temp <- data.frame(matrix(unlist(temp), nrow=length(temp), byrow=T))
temp[1:5, ]
db$ip_address[1:5]
df$ip_c1 <- temp[, 1]
df$ip_c2 <- temp[, 2]
df$ip_c3 <- temp[, 3]
df$ip_c4 <- temp[, 4]
temp[1:5, ]
temp[1:5, 1]
temp <- sapply(db$ip_address, function(x) strsplit(x = x, split = ".", fixed = TRUE)[[1]] )
temp <- as.data.frame(matrix(unlist(temp), nrow=length(temp), byrow=T), stringsAsFactors = FALSE)
head(df)
head(df)
df[1:5, ]
db$ip_c1 <- temp[, 1]
db$ip_c2 <- temp[, 2]
db$ip_c3 <- temp[, 3]
db$ip_c4 <- temp[, 4]
head(db)
db <- db[, c('timestamp', 'ip_address', 'ip_c1', 'ip_c2', 'ip_c3', 'ip_c4'
, 'domain_name', 'uri', 'user_agent_str')]
head(db)
unique(db$ip_address)
length(unique(db$ip_address))
unique(db$timestamp)
sumn$ipcount_c12 <- ddply(db, .(ip_c1, ip_c2), nrow)
sumn <- list()
sumn$ipcount_c12 <- ddply(db, .(ip_c1, ip_c2), nrow)
sumn <- list()
sumn$ipcount_c12 <- ddply(db
, .(ip_c1, ip_c2)
, function(df){
## ************************ ##
## Unique ip address in the ##
## group                    ##
## ************************ ##
res <- length(unique(df$ip_address))
return(res)
})
sumn$ipcount_c12
sumn$ipcount_c12 <- sort(sumn$ipcount_c12, decreasing = TRUE)
sumn$ipcount_c12 <- sumn$ipcount_c12[sort(sumn$ipcount_c12$V1, decreasing = TRUE), ]
sumn$ipcount_c12 <- arrange(sumn$ipcount_c12, desc(V1))
sumn$ipcount_c12[1:5, ]
sumn$ipcount_c12[1:10, ]
sumn$ipcount_c12 <- ddply(db
, .(ip_c1, ip_c2)
, function(df){
## ************************ ##
## Unique ip address in the ##
## group                    ##
## ************************ ##
res <- length(unique(df$ip_address))
return(res)
})
sumn$ipcount_c12 <- arrange(sumn$ipcount_c12, desc(V1))
sumn$ipcount_c12[1:10, ]
sumn$ipcount_c12 <- ddply(db
, .(ip_c1, ip_c2)
, function(df){
## ************************ ##
## Unique ip address in the ##
## group                    ##
## ************************ ##
uniq_ip <- length(unique(df$ip_address))
tot_obs <- nrow(df)
res     <- c("uniq_ip" = uniq_ip
, "tot_obs" = tot_obs)
return(res)
})
sumn$ipcount_c12[1:5, ]
res <- duplicated(db$ip_address)
res
res <- unique(db$ip_address[duplicated(db$ip_address)])
res
res[1]
subset(db, ip_address == res[1])
res[1]
subset(db, ip_address == res[1])[1:5, ]
subset(db, ip_address == res[2])[1:5, ]
sumn$ipcount_c12 <- arrange(sumn$ipcount_c12, desc(uniq_ip))
unique(db$user_agent_str)
unique(db$user_agent_str)[1:100]
sumn$ipcount_c12 <- arrange(sumn$ipcount_c12, desc(uniq_ip))
sumn <- list()
sumn$ipcount_c12 <- ddply(db
, .(ip_c1, ip_c2)
, function(df){
## ************************ ##
## Unique ip address in the ##
## group                    ##
## ************************ ##
uniq_ip     <- length(unique(df$ip_address))
tot_profile <- nrow(unique(df[, c("ip_address", "user_agent_str")]))
tot_records <- nrow(
res     <- c("uniq_ip" = uniq_ip
, "tot_profile" = tot_profile
, "tot_obs" = tot_obs)
return(res)
})
sumn$ipcount_c12 <- arrange(sumn$ipcount_c12, desc(tot_profile))
sumn$ipcount_c12 <- ddply(db
, .(ip_c1, ip_c2)
, function(df){
## ************************ ##
## Unique ip address in the ##
## group                    ##
## ************************ ##
uniq_ip     <- length(unique(df$ip_address))
tot_profile <- nrow(unique(df[, c("ip_address", "user_agent_str")]))
tot_records <- nrow(unique(df[, "ip_address"])
res     <- c("uniq_ip" = uniq_ip
, "tot_profile" = tot_profile
, "tot_obs" = tot_obs)
return(res)
})
sumn$ipcount_c12 <- arrange(sumn$ipcount_c12, desc(tot_profile))
sumn <- list()
sumn$ipcount_c12 <- ddply(db
, .(ip_c1, ip_c2)
, function(df){
## ************************ ##
## Unique ip address in the ##
## group                    ##
## ************************ ##
uniq_ip     <- length(unique(df$ip_address))
tot_profile <- nrow(unique(df[, c("ip_address", "user_agent_str")]))
tot_records <- nrow(unique(df[, "ip_address"]))
res     <- c("uniq_ip" = uniq_ip
, "tot_profile" = tot_profile
, "tot_obs" = tot_obs)
return(res)
})
sumn$ipcount_c12 <- arrange(sumn$ipcount_c12, desc(tot_profile))
sumn$ipcount_c12 <- ddply(db
, .(ip_c1, ip_c2)
, function(df){
## ************************ ##
## Unique ip address in the ##
## group                    ##
## ************************ ##
uniq_ip     <- length(unique(df$ip_address))
tot_profile <- nrow(unique(df[, c("ip_address", "user_agent_str")]))
tot_records <- nrow(unique(df[, "ip_address"]))
res     <- c("uniq_ip" = uniq_ip
, "tot_profile" = tot_profile
, "tot_obs" = tot_records)
return(res)
})
sumn$ipcount_c12 <- arrange(sumn$ipcount_c12, desc(tot_profile))
sumn$ipcount_c12
plot(x = 1:nrow(sumn$ipcount_c12), y = sumn$ipcount_c12$tot_profile)
plot(x = 1:nrow(sumn$ipcount_c12), y = sumn$ipcount_c12$tot_profile[-1:2])
plot(x = 3:nrow(sumn$ipcount_c12), y = sumn$ipcount_c12$tot_profile[-1:2])
plot(x = 3:nrow(sumn$ipcount_c12), y = sumn$ipcount_c12$tot_profile[-c(1:2)])
boxplot(sumn$ipcount_c12$tot_profile)
table(sumn$ipcount_c12$tot_profile)
quantile(x = sumn$ipcount_c12$tot_profile)
quantile(x = sumn$ipcount_c12$tot_profile, probs = c(.95, .975, .99))
quantile(x = sumn$ipcount_c12$tot_profile, probs = c(.95, .975, .99))
quantile(x = sumn$ipcount_c12$tot_profile, probs = c(.95, .975, .99, .995))
quantile(x = sumn$ipcount_c12$tot_profile, probs = c(.95, .975, .99, .995, .999))
subset(sumn$ipcount_c12, tot_profile == 14)
subset(sumn$ipcount_c12, tot_profile == 14)[1:5, ]
subset(db, ip_c1 == 0 & ip_c2 == 117)
temp <- matrix(0, nrow = nrow(db), ncol = 4)
for(i.row in nrow(db)){
ip_addr       <- db$ip_address[i.row]
temp[i.row, ] <- strsplit(x = x, split = ".", fixed = TRUE)[[1]]
}
temp <- matrix(0, nrow = nrow(db), ncol = 4)
for(i.row in nrow(db)){
ip_addr       <- db$ip_address[i.row]
temp[i.row, ] <- strsplit(x = ip_addr, split = ".", fixed = TRUE)[[1]]
}
db$ip_c1 <- temp[, 1]
db$ip_c2 <- temp[, 2]
db$ip_c3 <- temp[, 3]
db$ip_c4 <- temp[, 4]
db <- db[, c('timestamp', 'ip_address', 'ip_c1', 'ip_c2', 'ip_c3', 'ip_c4'
, 'domain_name', 'uri', 'user_agent_str')]
sumn <- list()
sumn$ipcount_c12 <- ddply(db
, .(ip_c1, ip_c2)
, function(df){
## ************************ ##
## Unique ip address in the ##
## group                    ##
## ************************ ##
uniq_ip     <- length(unique(df$ip_address))
tot_profile <- nrow(unique(df[, c("ip_address", "user_agent_str")]))
tot_records <- nrow(unique(df[, "ip_address"]))
res     <- c("uniq_ip" = uniq_ip
, "tot_profile" = tot_profile
, "tot_obs" = tot_records)
return(res)
})
sumn$ipcount_c12 <- arrange(sumn$ipcount_c12, desc(tot_profile))
sumn$ipcount_c12
temp
temp <- matrix(0, nrow = nrow(db), ncol = 4)
for(i.row in 1:nrow(db)){
ip_addr       <- db$ip_address[i.row]
temp[i.row, ] <- strsplit(x = ip_addr, split = ".", fixed = TRUE)[[1]]
}
